set nocompatible              " be iMproved, required
filetype off                  " required
set encoding=UTF-8

set tabstop=2 shiftwidth=2 expandtab
" I must see the lines!!
set number
" Render whitespaces :)
set listchars=tab:..,trail:~,extends:>,precedes:<
set list
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xuyuanp/nerdtree-git-plugin'
Plugin 'blueshirts/darcula'
Plugin 'vim-airline/vim-airline'
Plugin 'scrooloose/nerdcommenter'
Plugin 'elzr/vim-json'
Plugin 'mattn/emmet-vim'
Plugin 'Yggdroot/indentLine'
Plugin 'yuezk/vim-js'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'dense-analysis/ale'
if has('nvim')
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif
Plugin 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
Plugin 'ryanoasis/vim-devicons'
call vundle#end()

filetype plugin indent on    " required

" Open NERDTree after init
autocmd vimenter * NERDTree

" Define mapleader key
let mapleader = ","

" Highly experimental ( Might break something :( )
" I'll start mapping some useful keybinds to use (Neo)Vim as my main editor
" for everything I do

" Toggle NERDTree
nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
" Refresh NERDTree
nnoremap <silent> <Leader>nr :NERDTreeRefreshRoot<CR>
" Remove search highlight
nnoremap <silent> <Leader>us :noh<CR>

" Work with tabs
nnoremap <silent> <Leader>n :tabNew<CR>
nnoremap <silent> <Leader>] :tabnext<CR>
nnoremap <silent> <Leader>[ :tabprevious<CR>

" Search options
set ignorecase " Make search insensitive to case
set smartcase " But smart enough to find both ocurrences :)
set incsearch " Highlight matching search

" vim-arline plugin will handle linting errors
let g:airline#extensions#ale#enabled = 1

set statusline=%{FugitiveStatusline()}

syntax enable

" Use darcula as my main color scheme
colorscheme darcula

" ALE configs
let g:alex_fixers = {
  \ 'javascript': ['prettier', 'eslint'],
  \ 'jsx' : ['prettier', 'eslint'],
  \ 'javascript.jsx' : ['prettier', 'eslint'],
  \ 'vue': ['prettier', 'eslint'],
  \ 'javascriptreact': ['prettier', 'eslint'],
\ }
let g:ale_fix_on_save = 1

" Autocompletion
let g:deoplete#enable_at_startup = 1
" Set bin if you have many instalations
let g:deoplete#sources#ternjs#tern_bin = '/Users/rgarcia/.npmglobal/bin/tern'
let g:deoplete#sources#ternjs#timeout = 1

" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1

" Whether to include the distance (in scopes for variables, in prototypes for 
" properties) between the completions and the origin position in the result 
" data. Default: 0
let g:deoplete#sources#ternjs#depths = 1

" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1

" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the 
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0

" Whether to use a case-insensitive compare between the current word and 
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1

" When completing a property and no completions are found, Tern will use some 
" heuristics to try and return some properties anyway. Set this to 0 to 
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0

" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0

" When disabled, only the text before the given position is considered part of 
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0

" Whether to ignore the properties of Object.prototype unless they have been 
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0

" Whether to include JavaScript keywords when completing something that is not 
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0

"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
  \ 'jsx',
  \ 'javascript.jsx',
  \ 'vue',
  \ 'javascriptreact',
\ ]
