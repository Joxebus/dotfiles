#!/bin/bash

# -----------------------------------------------------------------------------
# Author: Paul Weaver (weaverp@ruthorn.co.uk)
#
# Assign the prompt_command function defined below to the PROMPT_COMMAND
# environment variable in your .bashrc/.bash_profile to get a pretty prompt
# containing a bunch of information.
#
# Note: I don't provide a warranty of any kind with this software! On the plus
# side, however, please feel free to distribute this file to your friends,
# family, pets etc. (So long as you keep this attribution)
# -----------------------------------------------------------------------------

# NOTE colours will just fail silently if not present aside from the intial
# warning that .bash_colours is missing.
source $HOME/.bash_colors
source $HOME/gitprompt

function _padding {
    # Creates a string of spaces of the passed size
    local size=$1
    local result
    printf -v result "%${size}s" ' '
    echo "$result"
}
function _repeat_chars {
    # Creates a string of <size> repeats of <char>
    local char=$1
    local size=$2
    local temp_str=$(_padding ${size})
    echo ${temp_str// /${char}}
}
##TODO: User is git repo from bash git
if ! __git_ps1 &> /dev/null; then
    # Redefine __git_ps1 to print a helpful warning if it's not installed
    function __git_ps1 {
        echo '[Install __git_ps1]'
    }
fi

function prompt_command {
    # Must be the first thing we do, otherwise other exit statuses overwrite $?
    local exit_status=$?
    if [[ $exit_status == 0 ]]; then
        local exit_status_text=${BGreen}λ${Color_Off}
    else
        local exit_status_text=${BRed}✗${Color_Off}
    fi

    # Must run this early because when we use $() this adds to our jobs count
    local ip=$(hostname -I)
    local actualIP="${BGreen}${ip}${Color_Off}"

    local hostname=`hostname -s`
    local username=$(whoami)
    local host_text="${BBlue}${username}${Color_Off}${BBlue}@${Color_Off}${BBlue}${hostname}${Color_Off}"

    local virtual_env_text=""
    if [[ -n $VIRTUAL_ENV ]]; then
        virtual_env_text="${DarkGray}$(basename $VIRTUAL_ENV)${Color_Off}"
    fi

    local git_text git_ahead
    if git branch &> /dev/null; then
        # git is working and we're on a git branch
        if [[ "$(__git_ps1)" =~ 'GIT_DIR!' ]]; then
            # we're in the git directory!
            git_text="${Purple}$(__git_ps1) ${Color_Off}"
        else
            git_text=$(updatePrompt)
        fi
    else
        # prompt component when not in git
        git_text=' '
    fi

    local date_text=${DarkGray}$(date +%H:%M)${Color_Off}
    local prompt_char=${exit_status_text}
    local pwd_text="$(pwd | perl -pe "s|^$HOME|~|")"

    local remove_color_codes_regex="s/\\\\\[\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]\\\\\]//g"
    local length_elements=$(echo -e "${pwd_text}${virtual_env_text} ${git_text} ${actualIP}${date_text}" | perl -pe $remove_color_codes_regex)
    local rule_length=$(($COLUMNS - ${#length_elements} - 1))

    local rule
    if [[ ${rule_length} -gt 0 ]]; then
        # Everything fits on the info line
        rule="${DarkGray}$(_repeat_chars '─' ${rule_length}) "
    elif [[ ${rule_length} == 0 ]]; then
        # Everything JUST fits on the info line
        rule=""
    else
        # We need to truncate our path because the info line is too short
        pwd_text="…${pwd_text:$((${rule_length} * -1))}"
        rule=""
    fi
    pwd_text=${BBlue}${pwd_text}${Color_Off}
    local line_1="${pwd_text}${virtual_env_text} ${git_text} ${rule}${actualIP}${date_text}"
    local line_2="${host_text} ${prompt_char} "
    PS1="\n${line_1}\n${line_2}"
}
